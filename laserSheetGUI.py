#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.24.1
#  in conjunction with Tcl version 8.6
#    Dec 05, 2019 03:37:27 PM EST  platform: Windows NT

import sys
import pymba
import numpy as np
import stageController
import laserPowerControl 
import time
from tkinter.filedialog import asksaveasfilename
import threading
import cv2
import imageio
import os


try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def vp_start_gui(camera = None):
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    stageW,stage = stageController.create_StageControl(root)
    #stage = None
    top = LaserSheetGUI (root,camera=camera,stage=stage)
    root.mainloop()

w = None
def create_LaserSheetGUI(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = LaserSheetGUI (w)
    return (w, top)

def destroy_LaserSheetGUI():
    global w
    w.destroy()
    w = None

class LaserSheetGUI:
    def __init__(self, top=None,camera = None,stage=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font10 = "-family {Segoe UI} -size 12 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("400x450+0+1")
        top.title("Laser Sheet Imager")
        top.configure(background="#d9d9d9")

        #Setup Basic Hardware Components
        self.stage = stage #setup zaber stage
        self.camera = camera
        self.lpc = laserPowerControl.create_laserPowerControl(root)
        #Configure Camera
        self.camera.PixelFormat = 'Mono8'
        self.camera.BinningHorizontal = 1
        self.camera.BinningVertical = 1
        self.camera.OffsetX = 0
        self.camera.OffsetY = 0
        self.camera.Height = self.camera.HeightMax
        self.camera.Width = self.camera.WidthMax

        self.camera.Gain = 10
        self.camera.ExposureTimeAbs = 1e4

        #Program Quantities
        self.savePath = "default.tif"
        self.run = 0 #run state of video
        self.magnification = [1,1.3,1.5,2,2.5,3.3,5,10] #list of allowed magnifications
        self.magIdx = 0 #magnification index


        self.startPosValVar = tk.StringVar()
        self.startPosValVar.set('0')
        self.startPosVal = tk.Entry(top)
        self.startPosVal.place(relx=0.075, rely=0.2,height=40, relwidth=0.21)
        self.startPosVal.configure(background="white")
        self.startPosVal.configure(disabledforeground="#a3a3a3")
        self.startPosVal.configure(font="TkFixedFont")
        self.startPosVal.configure(foreground="#000000")
        self.startPosVal.configure(insertbackground="black")
        self.startPosVal.configure(width=84)
        self.startPosVal.configure(justify = 'center')
        self.startPosVal.configure(textvariable = self.startPosValVar)

        self.startPosLabel = tk.Label(top)
        self.startPosLabel.place(relx=0.025, rely=0.111, height=21, width=114)
        self.startPosLabel.configure(background="#d9d9d9")
        self.startPosLabel.configure(disabledforeground="#a3a3a3")
        self.startPosLabel.configure(foreground="#000000")
        self.startPosLabel.configure(text='''Start Position (mm)''')
        self.startPosLabel.configure(width=114)

        self.endPosLabel = tk.Label(top)
        self.endPosLabel.place(relx=0.025, rely=0.333, height=21, width=124)
        self.endPosLabel.configure(activebackground="#f9f9f9")
        self.endPosLabel.configure(activeforeground="black")
        self.endPosLabel.configure(background="#d9d9d9")
        self.endPosLabel.configure(disabledforeground="#a3a3a3")
        self.endPosLabel.configure(foreground="#000000")
        self.endPosLabel.configure(highlightbackground="#d9d9d9")
        self.endPosLabel.configure(highlightcolor="black")
        self.endPosLabel.configure(text='''End Position (mm)''')
        self.endPosLabel.configure(width=124)

        self.endPosValVar = tk.StringVar()
        self.endPosValVar.set('100')
        self.endPosVal = tk.Entry(top)
        self.endPosVal.place(relx=0.075, rely=0.4,height=40, relwidth=0.21)
        self.endPosVal.configure(background="white")
        self.endPosVal.configure(disabledforeground="#a3a3a3")
        self.endPosVal.configure(font="TkFixedFont")
        self.endPosVal.configure(foreground="#000000")
        self.endPosVal.configure(highlightbackground="#d9d9d9")
        self.endPosVal.configure(highlightcolor="black")
        self.endPosVal.configure(insertbackground="black")
        self.endPosVal.configure(selectbackground="#c4c4c4")
        self.endPosVal.configure(selectforeground="black")
        self.endPosVal.configure(justify = 'center')
        self.endPosVal.configure(textvariable = self.endPosValVar)

        self.setStart = tk.Button(top)
        self.setStart.place(relx=0.325, rely=0.222, height=24, width=54)
        self.setStart.configure(activebackground="#ececec")
        self.setStart.configure(activeforeground="#000000")
        self.setStart.configure(background="#d9d9d9")
        self.setStart.configure(disabledforeground="#a3a3a3")
        self.setStart.configure(foreground="#000000")
        self.setStart.configure(highlightbackground="#d9d9d9")
        self.setStart.configure(highlightcolor="black")
        self.setStart.configure(pady="0")
        self.setStart.configure(text='''Set Start''')
        self.setStart.configure(command = lambda pos = "start": self.setPos(pos))

        self.setEnd = tk.Button(top)
        self.setEnd.place(relx=0.325, rely=0.422, height=24, width=54)
        self.setEnd.configure(activebackground="#ececec")
        self.setEnd.configure(activeforeground="#000000")
        self.setEnd.configure(background="#d9d9d9")
        self.setEnd.configure(disabledforeground="#a3a3a3")
        self.setEnd.configure(foreground="#000000")
        self.setEnd.configure(highlightbackground="#d9d9d9")
        self.setEnd.configure(highlightcolor="black")
        self.setEnd.configure(pady="0")
        self.setEnd.configure(text='''Set End''')
        self.setEnd.configure(command = lambda pos = "end": self.setPos(pos))

        
            
        self.numFramesVar = tk.StringVar()
        self.numFramesVar.set('500') #default to 500 frames
        self.numFrames = tk.Entry(top)
        self.numFrames.place(relx=0.075, rely=0.578,height=40, relwidth=0.21)
        self.numFrames.configure(background="white")
        self.numFrames.configure(disabledforeground="#a3a3a3")
        self.numFrames.configure(font="TkFixedFont")
        self.numFrames.configure(foreground="#000000")
        self.numFrames.configure(insertbackground="black")
        self.numFrames.configure(width=84)
        self.numFrames.configure(justify = 'center')
        self.numFrames.configure(state = 'readonly')
        self.numFrames.configure(textvariable = self.numFramesVar)


        self.frameSpacingVar = tk.StringVar()
        self.frameSpacingVar.set("0.100") #default to 100 um
        self.frameSpacing = tk.Entry(top)
        self.frameSpacing.place(relx=0.075, rely=0.756, height=40, relwidth=0.21)
        self.frameSpacing.configure(background="white")
        self.frameSpacing.configure(disabledforeground="#a3a3a3")
        self.frameSpacing.configure(font="TkFixedFont")
        self.frameSpacing.configure(foreground="#000000")
        self.frameSpacing.configure(highlightbackground="#d9d9d9")
        self.frameSpacing.configure(highlightcolor="black")
        self.frameSpacing.configure(insertbackground="black")
        self.frameSpacing.configure(selectbackground="#c4c4c4")
        self.frameSpacing.configure(selectforeground="black")
        self.frameSpacing.configure(textvariable = self.frameSpacingVar)
        self.frameSpacing.configure(justify = 'center')
        self.frameSpacing.configure(state = 'normal')

        self.numFramesLabel = tk.Label(top)
        self.numFramesLabel.place(relx=0.05, rely=0.511, height=21, width=104)
        self.numFramesLabel.configure(activebackground="#f9f9f9")
        self.numFramesLabel.configure(activeforeground="black")
        self.numFramesLabel.configure(background="#d9d9d9")
        self.numFramesLabel.configure(disabledforeground="#a3a3a3")
        self.numFramesLabel.configure(foreground="#000000")
        self.numFramesLabel.configure(highlightbackground="#d9d9d9")
        self.numFramesLabel.configure(highlightcolor="black")
        self.numFramesLabel.configure(text='''Number of Frames''')
        self.numFramesLabel.configure(width=104)

        self.frameSpaceLabel = tk.Label(top)
        self.frameSpaceLabel.place(relx=0.05, rely=0.689, height=21, width=114)
        self.frameSpaceLabel.configure(activebackground="#f9f9f9")
        self.frameSpaceLabel.configure(activeforeground="black")
        self.frameSpaceLabel.configure(background="#d9d9d9")
        self.frameSpaceLabel.configure(disabledforeground="#a3a3a3")
        self.frameSpaceLabel.configure(foreground="#000000")
        self.frameSpaceLabel.configure(highlightbackground="#d9d9d9")
        self.frameSpaceLabel.configure(highlightcolor="black")
        self.frameSpaceLabel.configure(text='''Frame Spacing (mm)''')
        self.frameSpaceLabel.configure(width=114)

        self.setFrameProps = tk.Button(top)
        self.setFrameProps.place(relx=0.325, rely=0.778, height=24, width=54)
        self.setFrameProps.configure(activebackground="#ececec")
        self.setFrameProps.configure(activeforeground="#000000")
        self.setFrameProps.configure(background="#d9d9d9")
        self.setFrameProps.configure(disabledforeground="#a3a3a3")
        self.setFrameProps.configure(foreground="#000000")
        self.setFrameProps.configure(highlightbackground="#d9d9d9")
        self.setFrameProps.configure(highlightcolor="black")
        self.setFrameProps.configure(pady="0")
        self.setFrameProps.configure(text='''Set''')
        self.setFrameProps.configure(command = self.setFrameSpecs)

        self.swapFrameSpecs = tk.Button(top)
        self.swapFrameSpecs.place(relx=0.325, rely=0.6, height=24, width=54)
        self.swapFrameSpecs.configure(activebackground="#ececec")
        self.swapFrameSpecs.configure(activeforeground="#000000")
        self.swapFrameSpecs.configure(background="#d9d9d9")
        self.swapFrameSpecs.configure(disabledforeground="#a3a3a3")
        self.swapFrameSpecs.configure(foreground="#000000")
        self.swapFrameSpecs.configure(highlightbackground="#d9d9d9")
        self.swapFrameSpecs.configure(highlightcolor="black")
        self.swapFrameSpecs.configure(pady="0")
        self.swapFrameSpecs.configure(text=u'\u21c5')
        self.swapFrameSpecs.configure(width=54)
        self.swapFrameSpecs.configure(command = self.swapActive)

        self.progBarVar = tk.IntVar()
        self.progBarVar.set(0)
        self.scanProgressBar = ttk.Progressbar(top)
        self.scanProgressBar.place(relx=0.6, rely=0.933, relwidth=0.35
                , relheight=0.0, height=22)
        self.scanProgressBar.configure(length="140")
        self.scanProgressBar.configure(mode = 'determinate')
        self.scanProgressBar.configure(variable = self.progBarVar)

        self.scanStatusLabel = tk.Label(top)
        self.scanStatusLabel.place(relx=0.675, rely=0.867, height=21, width=79)
        self.scanStatusLabel.configure(background="#d9d9d9")
        self.scanStatusLabel.configure(disabledforeground="#a3a3a3")
        self.scanStatusLabel.configure(foreground="#000000")
        self.scanStatusLabel.configure(text='''Scan Progress''')

        self.previewCameraStr = tk.StringVar()
        self.previewCameraStr.set("Preview")
        self.previewCamera = tk.Button(top)
        self.previewCamera.place(relx=0.7, rely=0.756, height=24, width=52)
        self.previewCamera.configure(activebackground="#ececec")
        self.previewCamera.configure(activeforeground="#000000")
        self.previewCamera.configure(background="#d9d9d9")
        self.previewCamera.configure(disabledforeground="#a3a3a3")
        self.previewCamera.configure(foreground="#000000")
        self.previewCamera.configure(highlightbackground="#d9d9d9")
        self.previewCamera.configure(highlightcolor="black")
        self.previewCamera.configure(pady="0")
        self.previewCamera.configure(textvariable = self.previewCameraStr)
        self.previewCamera.configure(command = self.togglePreview)

        self.stopAcq = tk.Button(top)
        self.stopAcq.place(relx=0.35, rely=0.889, height=35, width=75)
        self.stopAcq.configure(activebackground="#ececec")
        self.stopAcq.configure(activeforeground="#000000")
        self.stopAcq.configure(background="#d9d9d9")
        self.stopAcq.configure(disabledforeground="#a3a3a3")
        self.stopAcq.configure(foreground="#000000")
        self.stopAcq.configure(highlightbackground="#d9d9d9")
        self.stopAcq.configure(highlightcolor="black")
        self.stopAcq.configure(pady="0")
        self.stopAcq.configure(text='''Stop''')
        self.stopAcq.configure(width=75)
        self.stopAcq.configure(command = self.setGuiState)

        self.mashGo = tk.Button(top)
        self.mashGo.place(relx=0.125, rely=0.889, height=35, width=75)
        self.mashGo.configure(activebackground="#ececec")
        self.mashGo.configure(activeforeground="#000000")
        self.mashGo.configure(background="#d9d9d9")
        self.mashGo.configure(disabledforeground="#a3a3a3")
        self.mashGo.configure(foreground="#000000")
        self.mashGo.configure(highlightbackground="#d9d9d9")
        self.mashGo.configure(highlightcolor="black")
        self.mashGo.configure(pady="0")
        self.mashGo.configure(text='''Start''')
        self.mashGo.configure(command = self.acquireStack)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.discreteVar = tk.IntVar()
        self.discreteVar.set(1)
        self.continVar = tk.IntVar()
        self.continVar.set(0)
        self.binVar1 = tk.IntVar()
        self.binVar2 = tk.IntVar()
        self.binVar3 = tk.IntVar()
        self.binVar4 = tk.IntVar()
        self.binVar1.set(1)
        self.binVar2.set(0)
        self.binVar3.set(0)
        self.binVar4.set(0)
        self.sub_menu = tk.Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="File")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Set Save Path",
                accelerator = "Ctrl + S",
                command = self.setSavePath
                )
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Quit",
                accelerator = "Ctrl + Q",
                command = self.quit)
        self.sub_menu1 = tk.Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu1,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Scan Mode")
        self.sub_menu1.add_checkbutton(
                variable=self.discreteVar,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Staircase",
                command = lambda value = 'Discrete':self.setAcquisitionMode(value=value))
        self.sub_menu1.add_checkbutton(
                variable=self.continVar,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Continuous",
                state = 'disabled',
                command = lambda value = 'Continuous':self.setAcquisitionMode(value=value))
        self.sub_menu13 = tk.Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu13,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Binning")
        self.sub_menu13.add_checkbutton(
                variable=self.binVar1,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="1",
                command = lambda value = 1:self.setBinning(value=value))
        self.sub_menu13.add_checkbutton(
                variable=self.binVar2,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="2",
                command = lambda value = 2:self.setBinning(value=value))
        self.sub_menu13.add_checkbutton(
                variable=self.binVar2,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="3",
                command = lambda value = 3:self.setBinning(value=value))
        self.sub_menu13.add_checkbutton(
                variable=self.binVar4,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="4",
                command = lambda value = 4:self.setBinning(value=value))
        self.sub_menu12 = tk.Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu12,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Help")
        self.sub_menu12.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="About")
        self.sub_menu12.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                compound="left",
                font="TkMenuFont",
                foreground="#000000",
                label="Manual",
                state = "disabled")

        ##establish hot keys##
        root.bind_all('<Control-Key-q>', self.quit)
        root.bind_all('<Control-Key-s>', self.setSavePath)
        
        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=0.525, rely=0.044, relheight=0.822)
        self.TSeparator1.configure(orient="vertical")

        self.cameraLabel = tk.Label(top)
        self.cameraLabel.place(relx=0.575, rely=0.044, height=27, width=130)
        self.cameraLabel.configure(background="#d9d9d9")
        self.cameraLabel.configure(disabledforeground="#a3a3a3")
        self.cameraLabel.configure(font=font10)
        self.cameraLabel.configure(foreground="#000000")
        self.cameraLabel.configure(text='''Camera Settings''')

        self.TSeparator2 = ttk.Separator(top)
        self.TSeparator2.place(relx=0.025, rely=0.867, relwidth=0.925)

        self.scanSettings = tk.Label(top)
        self.scanSettings.place(relx=0.1, rely=0.044, height=27, width=130)
        self.scanSettings.configure(activebackground="#f9f9f9")
        self.scanSettings.configure(activeforeground="black")
        self.scanSettings.configure(background="#d9d9d9")
        self.scanSettings.configure(disabledforeground="#a3a3a3")
        self.scanSettings.configure(font=font10)
        self.scanSettings.configure(foreground="#000000")
        self.scanSettings.configure(highlightbackground="#d9d9d9")
        self.scanSettings.configure(highlightcolor="black")
        self.scanSettings.configure(text='''Scan Settings''')


        self.gainValVar = tk.StringVar()
        self.gainVal = tk.Entry(top)
        self.gainValVar.set("10") #default to 20 dB
        self.gainVal.place(relx=0.6, rely=0.18,height=40, relwidth=0.21)
        self.gainVal.configure(background="white")
        self.gainVal.configure(disabledforeground="#a3a3a3")
        self.gainVal.configure(font="TkFixedFont")
        self.gainVal.configure(foreground="#000000")
        self.gainVal.configure(highlightbackground="#d9d9d9")
        self.gainVal.configure(highlightcolor="black")
        self.gainVal.configure(insertbackground="black")
        self.gainVal.configure(selectbackground="#c4c4c4")
        self.gainVal.configure(selectforeground="black")
        self.gainVal.configure(justify = 'center')
        self.gainVal.configure(textvariable = self.gainValVar)

        
        self.exposureValVar = tk.StringVar()
        self.exposureValVar.set("10") #default to 100 ms
        self.exposureVal = tk.Entry(top)
        self.exposureVal.place(relx=0.6, rely=0.38,height=40, relwidth=0.21)
        self.exposureVal.configure(background="white")
        self.exposureVal.configure(disabledforeground="#a3a3a3")
        self.exposureVal.configure(font="TkFixedFont")
        self.exposureVal.configure(foreground="#000000")
        self.exposureVal.configure(highlightbackground="#d9d9d9")
        self.exposureVal.configure(highlightcolor="black")
        self.exposureVal.configure(insertbackground="black")
        self.exposureVal.configure(selectbackground="#c4c4c4")
        self.exposureVal.configure(selectforeground="black")
        self.exposureVal.configure(justify = 'center')
        self.exposureVal.configure(textvariable = self.exposureValVar)

        self.magValVar = tk.StringVar()
        self.magValVar.set("1") #default to magnification 1
        self.magVal = tk.Entry(top)
        self.magVal.place(relx=0.6, rely=0.61,height=40, relwidth=0.21)
        self.magVal.configure(background="white")
        self.magVal.configure(disabledforeground="#a3a3a3")
        self.magVal.configure(font="TkFixedFont")
        self.magVal.configure(foreground="#000000")
        self.magVal.configure(highlightbackground="#d9d9d9")
        self.magVal.configure(highlightcolor="black")
        self.magVal.configure(insertbackground="black")
        self.magVal.configure(selectbackground="#c4c4c4")
        self.magVal.configure(selectforeground="black")
        self.magVal.configure(justify = 'center')
        self.magVal.configure(state = 'readonly')
        self.magVal.configure(textvariable = self.magValVar)

        self.magUpButton = tk.Button(top)
        self.magUpButton.place(relx=0.85, rely=0.61, height=20, width=47)
        self.magUpButton.configure(activebackground="#ececec")
        self.magUpButton.configure(activeforeground="#000000")
        self.magUpButton.configure(background="#d9d9d9")
        self.magUpButton.configure(disabledforeground="#a3a3a3")
        self.magUpButton.configure(foreground="#000000")
        self.magUpButton.configure(highlightbackground="#d9d9d9")
        self.magUpButton.configure(highlightcolor="black")
        self.magUpButton.configure(pady="0")
        self.magUpButton.configure(text='''+''')
        self.magUpButton.configure(command = lambda direction = "inc": self.setMag(direction))

        self.magDownButton = tk.Button(top)
        self.magDownButton.place(relx=0.85, rely=0.66, height=20, width=47)
        self.magDownButton.configure(activebackground="#ececec")
        self.magDownButton.configure(activeforeground="#000000")
        self.magDownButton.configure(background="#d9d9d9")
        self.magDownButton.configure(disabledforeground="#a3a3a3")
        self.magDownButton.configure(foreground="#000000")
        self.magDownButton.configure(highlightbackground="#d9d9d9")
        self.magDownButton.configure(highlightcolor="black")
        self.magDownButton.configure(pady="0")
        self.magDownButton.configure(text='''-''')
        self.magDownButton.configure(command = lambda direction = "dec": self.setMag(direction))

        self.magLabel = tk.Label(top)
        self.magLabel.place(relx=0.55, rely=0.51, height=27, width=130)
        self.magLabel.configure(background="#d9d9d9")
        self.magLabel.configure(disabledforeground="#a3a3a3")
        self.magLabel.configure(foreground="#000000")
        self.magLabel.configure(text='''Zoom''')

        self.gainLabel = tk.Label(top)
        self.gainLabel.place(relx=0.55, rely=0.12, height=27, width=130)
        self.gainLabel.configure(background="#d9d9d9")
        self.gainLabel.configure(disabledforeground="#a3a3a3")
        self.gainLabel.configure(foreground="#000000")
        self.gainLabel.configure(text='''Gain (dB)''')

        self.expLabel = tk.Label(top)
        self.expLabel.place(relx=0.55, rely=0.32, height=27, width=130)
        self.expLabel.configure(background="#d9d9d9")
        self.expLabel.configure(disabledforeground="#a3a3a3")
        self.expLabel.configure(foreground="#000000")
        self.expLabel.configure(text='''Exposure (ms)''')


        self.setGainButton = tk.Button(top)
        self.setGainButton.place(relx=0.85, rely=0.2, height=24, width=47)
        self.setGainButton.configure(activebackground="#ececec")
        self.setGainButton.configure(activeforeground="#000000")
        self.setGainButton.configure(background="#d9d9d9")
        self.setGainButton.configure(disabledforeground="#a3a3a3")
        self.setGainButton.configure(foreground="#000000")
        self.setGainButton.configure(highlightbackground="#d9d9d9")
        self.setGainButton.configure(highlightcolor="black")
        self.setGainButton.configure(pady="0")
        self.setGainButton.configure(text='''Set''')
        self.setGainButton.configure(command = self.setGain)

        self.exposureButton = tk.Button(top)
        self.exposureButton.place(relx=0.85, rely=0.4, height=24, width=47)
        self.exposureButton.configure(activebackground="#ececec")
        self.exposureButton.configure(activeforeground="#000000")
        self.exposureButton.configure(background="#d9d9d9")
        self.exposureButton.configure(disabledforeground="#a3a3a3")
        self.exposureButton.configure(foreground="#000000")
        self.exposureButton.configure(highlightbackground="#d9d9d9")
        self.exposureButton.configure(highlightcolor="black")
        self.exposureButton.configure(pady="0")
        self.exposureButton.configure(text='''Set''')
        self.exposureButton.configure(command = lambda value = self.exposureValVar.get():self.setExposure(value=value))


    def setPos(self,pos):
        currentPos = self.stage.getCurrentPosition()
        if pos == "start":
            self.startPosValVar.set('%.3f' % currentPos)
        elif pos == "end":
            self.endPosValVar.set('%.3f' % currentPos)
        else:
            print("error, could not assign")
          
    def checkIsNum(self,inString):
        return(inString.replace('.','',1).isnumeric()) #true if a valid decimal number, false otherwise

    def setMag(self,direction):
        change  = False
        if direction == "inc":
            if self.magIdx <(len(self.magnification)-1):
                self.magIdx +=1
                self.magValVar.set(str(self.magnification[self.magIdx]))
                change = True
        elif direction == "dec":
            if self.magIdx>0:
                self.magIdx -=1
                self.magValVar.set(str(self.magnification[self.magIdx]))
                change = True
        #update camera
        if change:
            if self.magIdx==0:
                self.camera.OffsetX = 0
                self.camera.OffsetY = 0
                height = self.camera.HeightMax
                width = self.camera.WidthMax
                xOffset = 0
                yOffset = 0
            else:
                height = self.camera.HeightMax/self.magnification[self.magIdx]
                height = np.uint16(height)#must be an integer
                height = height -height%4 #must be a multiple of 4
                width = self.camera.WidthMax/self.magnification[self.magIdx]
                width = np.uint16(width) #musts be an integer
                width = width -width%4  #must be a multiple of 4
                xOffset = (self.camera.WidthMax-width)/2
                xOffset = np.uint16(xOffset)
                xOffset = xOffset-xOffset%4
                yOffset = (self.camera.HeightMax-height)/2
                yOffset = np.uint16(yOffset)
                yOffset = yOffset-yOffset%4
            feat = self.camera.feature("Height")
            feat.value = np.uint16(height)
            feat = self.camera.feature("Width")
            feat.value = np.uint16(width)
            feat = self.camera.feature("OffsetX")
            feat.value = np.uint16(xOffset)
            feat = self.camera.feature("OffsetY")
            feat.value = np.uint16(yOffset)
       



    def setBinning(self,value):
        self.camera.BinningHorizontal = np.uint8(value)
        self.camera.BinningVertical = np.uint8(value)
        self.binVar1.set(value ==1)
        self.binVar2.set(value ==2)
        self.binVar3.set(value==3)
        self.binVar4.set(value ==4)


    def setGain(self):
        gainFeat = self.camera.feature("Gain")
        oldGain = gainFeat.value
        newGain = self.gainValVar.get()
        if self.checkIsNum(newGain):
            requestedGain = np.uint8(newGain)
            if (requestedGain>=0) & (requestedGain <= 40):
                gainFeat.value = requestedGain
            else:
                print("Gain outside of allowed values")
                self.gainValVar.set(str(oldGain))
        else:
            print("Not a number.")
            self.gainValVar.set(str(oldGain))
       
            
    def setExposure(self,value):
        expFeat = self.camera.feature("ExposureTimeAbs")
        oldExp = expFeat.value
        newExp = self.exposureValVar.get()
        if self.checkIsNum(newExp):
            requestedExp = np.uint32(float(newExp)*1000)
            if (requestedExp>=52) & (requestedExp<= 1e7):
                expFeat.value = requestedExp
            else:
                print("Gain outside of allowed values")
                self.exposureValVar.set(str(oldExp/1000))
        else:
            print("Not a number")
            self.exposureValVar.set(str(oldExp/1000))
        

    def setAcquisitionMode(self,value):
        if value == 'Discrete':
            self.DiscreteVar.set(1)
            self.continVar.set(0)
        elif value =='Continuous':
            self.DiscreteVar.set(0)
            self.continVar.set(1)
        else:
            print("No such acquisition mode. Valid values are 'Discrete' and 'Continuous'")

    def quit(self):
        root.destroy()
        sys.exit(1)

    def setSavePath(self):
        self.savePath = asksaveasfilename(title = 'Save File As...',defaultextension = '.tif',filetypes = [('TIFF Files','.tif')])
        
    def togglePreview(self):
        if self.run:
            self.run=0
            time.sleep(2)
            self.prev.join()
            self.camera.stop_frame_acquisition()
            self.stopAcq.configure(state = 'normal')
            self.camera.flush_capture_queue()
            self.camera.revoke_all_frames()
            self.camera.disarm()
            self.PixelFormat = 'Mono8'
            cv2.destroyWindow('preview')
            self.menubar.entryconfig("Binning",state = "normal")
            self.previewCameraStr.set('Preview')
        else:
            self.run = 1;
            self.menubar.entryconfig("Binning",state = "disabled")
            self.prev = threading.Thread(target = self.preview)
            cv2.startWindowThread()
            cv2.namedWindow('preview', flags = cv2.WINDOW_NORMAL)
            self.previewCameraStr.set('Stop')
            self.prev.start()


    def preview(self):
        self.camera.arm(mode = pymba.camera.CONTINUOUS,callback = self.streamFrame_callback, \
                frame_buffer_size=10)
        self.camera.AcquisitionFrameRateAbs = 10 
        self.PixelFormat = 'Mono8'
        self.camera.start_frame_acquisition()
        self.stopAcq.configure(state = 'disabled')
        while self.run:
            time.sleep(1/30)

    def streamFrame_callback(self,frame):
        if self.run:
            img = frame.buffer_data_numpy()
            if self.camera.PixelFormat == 'Mono12':
                img = np.uint8(img/4095*255)
            cv2.imshow(winname = 'preview',mat = img)
            cv2.waitKey(10)

    def swapActive(self):
        if (self.frameSpacing.cget('state') == 'normal') & (self.numFrames.cget('state') == 'readonly') :
            self.frameSpacing.configure(state = 'readonly')
            self.numFrames.configure(state = 'normal')
            self.setFrameProps.place(relx=0.325, rely=0.6, height=24, width=54)
            self.swapFrameSpecs.place(relx=0.325, rely=0.778, height=24, width=54)

        else:
            self.frameSpacing.configure(state = 'normal')
            self.numFrames.configure(state = 'readonly')
            self.setFrameProps.place(relx=0.325, rely=0.778, height=24, width=54)
            self.swapFrameSpecs.place(relx=0.325, rely=0.6, height=24, width=54)

    def setFrameSpecs(self): #makes sure number of frames and frame spacing are consistent; returns true if valid
        valid = False
        if (self.frameSpacing.cget('state') == 'normal') & (self.numFrames.cget('state') == 'readonly') : #frame spacing is driving
            if self.checkIsNum(self.startPosValVar.get()) & self.checkIsNum(self.endPosValVar.get()):
                self.numFramesVar.set(str(np.uint16(np.absolute(float(self.startPosValVar.get()) -\
                                                                float(self.endPosValVar.get()))/float(self.frameSpacingVar.get()))))
                valid = True
            else:
                self.numFramesVar.set('-')
        else:
            if self.checkIsNum(self.startPosValVar.get()) & self.checkIsNum(self.endPosValVar.get()):
                outStr = str(float(self.numFramesVar.get())/np.absolute(float(self.startPosValVar.get()) -\
                                                                        float(self.endPosValVar.get())))

                self.frameSpacing.set('%.3f' % outStr)                                                
                valid = True
            else:
                self.numFramesVar.set('-')
        return(valid)
        
    def validateParams(self):
        valid = False
        if self.checkIsNum(self.startPosValVar.get()) & self.checkIsNum(self.endPosValVar.get()):
            startPos = float(self.startPosValVar.get())
            endPos = float(self.endPosValVar.get())
            if (startPos<=100) & (startPos>=0) & (endPos>=0) & (endPos<=100):
                if self.setFrameSpecs():
                    valid = True
                else:
                    print('Error in number of frames or frame spacing')
            else:
                print("Start and/or End Positions are out of range")
        else:
            print('Start and/or End Position is non-numeric')         
        return(valid)

    def setGuiState(self,acqStatus=None):
        #State can either be readonly or normal
        if acqStatus=='Start':
            self.run = 1
            buttonState = 'disabled'
            entryState = 'readonly'
        else:
            self.run = 0
            self.stage.stopStage()
            buttonState = 'normal'
            entryState = 'normal'

        #Disable/Enable GUI Controls

        #Buttons
        self.setGainButton.configure(state = buttonState)
        self.exposureButton.configure(state = buttonState)
        self.magUpButton.configure(state = buttonState)
        self.magDownButton.configure(state = buttonState)
        self.previewCamera.configure(state = buttonState)
        self.mashGo.configure(state = buttonState)
        self.setStart.configure(state = buttonState)
        self.setEnd.configure(state = buttonState)
        self.swapFrameSpecs.configure(state = buttonState)
        self.setFrameProps.configure(state = buttonState)
        
        #Entry Boxes
        self.exposureVal.configure(state = entryState)
        self.gainVal.configure(state = entryState)
        self.startPosVal.configure(state = entryState)
        self.endPosVal.configure(state = entryState)
        self.frameSpacing.configure(state = entryState)
        self.numFrames.configure(state = entryState)

        #Menu Items
        self.menubar.entryconfig("File", state=buttonState)
        self.menubar.entryconfig("Help", state=buttonState)
        self.menubar.entryconfig("Scan Mode", state=buttonState)
        self.menubar.entryconfig("Binning", state = buttonState)
        
    def saveFrame_callback(self,frame):
        print('hi')
        
            
    
    def acquireStack(self):
        
    
        if self.validateParams():
            
            #Determine step intervals and the number of steps
            startPos = float(self.startPosValVar.get())
            endPos = float(self.endPosValVar.get())
            step = np.sign(endPos-startPos)*float(self.frameSpacing.get())
            numSteps = float(self.numFramesVar.get())
            frameNum = 0

            #Move stage to start position
            self.stage.moveAbsVar.set(self.startPosValVar.get())
            self.stage.moveAbs(threaded = False)
            
            #start display
            cv2.startWindowThread()
            cv2.namedWindow('Acquire', flags = cv2.WINDOW_NORMAL)

            #initialize image writer
            imWr = imageio.get_writer(self.savePath,format = 'tif',mode = 'I')
            descStr = 'Zoom: ' + str(self.magnification[self.magIdx]) + "; StepSize: " + self.frameSpacing.get() + " mm" + \
                      '; Binning: ' + str(self.camera.BinningHorizontal)
            imWr.set_meta_data({'description':descStr})

            
            #Set flag for acquisition and disable all but the stop button
            self.setGuiState(acqStatus = 'Start')
    


            #Using the Staircase Method

            if self.discreteVar.get():
                
                #Set camera to single frame capture and arm
                self.camera.arm('SingleFrame')
                frame = self.camera.new_frame()
                frame.announce()
                time.sleep(1)
                while (frameNum<=numSteps) & self.run:
                    #Acquire Image
                    frame = self.camera.acquire_frame()
                    #Save Image
                    img = frame.buffer_data_numpy()
                    imWr.append_data(img)
                    #Display Image
                    cv2.imshow(winname = 'Acquire',mat = img)
                    cv2.waitKey(1)
                    #Update Progress Bar
                    self.progBarVar.set(np.uint16(frameNum/numSteps*100))
                    root.update_idletasks()
                    
                    #Increment frame
                    frameNum +=1
                    
                    #move to next position, blockign command until completed
                    self.stage.moveRel(stepSize = str(np.absolute(step)),direction = np.sign(step),threaded = False)
            elif self.continVar.get():

                #Set camera to continuous frame capture
                self.camera.arm(mode = pymba.camera.CONTINUOUS,callback = self.saveFrame_callback, \
                frame_buffer_size=100)
                time.sleep(1)

                #Get Kinematic Parameters
                d = np.absolute(startPos-endPos)
                v  = self.stage.getCurrentSpeed()
                a = self.stage.getCurrentAccel()
                xi = startPos-np.sign(step)*v^2/2/a #Set true starting point to allow for acceleration x_f- x_i = (v_f^2  - v_i^2)/2a

                #Determine FPS
                fps = np.uint16(v/d*numSteps)

                #Queue Writer
                imWr = imagio.get_writer(self.savePath,format = 'tif',mode = 'I')
                descStr = 'Zoom: ' + str(self.magnification[self.magIdx]) + "; StepSize: " + self.frameSpacing.get() + \
                          " mm; FPS:" + str(fps) + "; Speed: "+ str(v) + " mm/s"
                imWr.set_meta_data({'description':descStr})   
                
            #Clean up when finished or if stoppped
            cv2.destroyWindow('Acquire')
            imWr.close()
            self.camera.disarm()
            self.progBarVar.set(0)
            self.setGuiState()
            file,folder = os.path.split(self.savePath)
            self.savePath = file + '_.tif' #insure default save path

    def aboutGUI(self):
        messagebox.showinfo("About Laser Sheet Imager", "Laser Sheet Imager Software Version 1.0\nCreated by Matthew J. Farrar\nEmail: mfarrar@messiah.edu\nCopyright 2019\nAll Rights Reserved")

            

if __name__ == '__main__':
    with pymba.Vimba() as vimba: #insures that camera is appropriately shut down
        vimba.startup()
        system = vimba.system()
        system.run_feature_command("GeVDiscoveryAllOnce")
        time.sleep(0.5)
        camera_ids = vimba.camera_ids()
        vmb_cam = vimba.camera(camera_ids[0])
        vmb_cam.open()
        vp_start_gui(camera = vmb_cam)




