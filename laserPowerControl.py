#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.24.1
#  in conjunction with Tcl version 8.6
#    Dec 12, 2019 02:39:36 PM EST  platform: Windows NT

import sys
import serial.tools.list_ports
import serial
import numpy as np
from time import sleep
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = laserPowerControl (root)
    root.mainloop()

w = None
def create_laserPowerControl(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    top = laserPowerControl (w)
    return (w, top)

def destroy_laserPowerControl():
    global w
    w.destroy()
    w = None


def unoSerial():
    ports = list(serial.tools.list_ports.comports())
    unoSer = ''
    baudrate = 115200
    for p in ports:
        if 'Uno' in p.description:
            unoSer = serial.Serial(port=p.device,baudrate=baudrate,timeout=3)
    return(unoSer)


class laserPowerControl:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font9 = "-family {Courier New} -size 24 -weight normal -slant "  \
            "roman -underline 0 -overstrike 0"

        try:
            self.ser = unoSerial()
            self.ser.write(b'0\n') #initialize power to 0
            self.ser.flushInput() #clear any data on line
            self.ser.flushInput()
        except: 
            print("No Arduino Found. Debugging mode only")
            
        top.geometry("234x162+1000+550")
        top.title("Laser Power")
        top.configure(background="#d9d9d9")
        self.powerEntryVar = tk.StringVar()
        self.powerEntryVar.set('0 %')
        self.powerEntry = tk.Entry(top)
        self.powerEntry.place(relx=0.085, rely=0.123,height=80, relwidth=0.487)
        self.powerEntry.configure(background="white")
        self.powerEntry.configure(disabledforeground="#a3a3a3")
        self.powerEntry.configure(font=font9)
        self.powerEntry.configure(foreground="#000000")
        self.powerEntry.configure(insertbackground="black")
        self.powerEntry.configure(textvariable=self.powerEntryVar)
        self.powerEntry.configure(width=114)
        self.powerEntry.configure(justify = 'center')
        self.powerEntry.configure(state = 'readonly')

        self.powerUp = tk.Button(top)
        self.powerUp.place(relx=0.726, rely=0.185, height=24, width=16)
        self.powerUp.configure(activebackground="#ececec")
        self.powerUp.configure(activeforeground="#000000")
        self.powerUp.configure(background="#d9d9d9")
        self.powerUp.configure(disabledforeground="#a3a3a3")
        self.powerUp.configure(foreground="#000000")
        self.powerUp.configure(highlightbackground="#d9d9d9")
        self.powerUp.configure(highlightcolor="black")
        self.powerUp.configure(pady="0")
        self.powerUp.configure(text=u"\u2191")
        self.powerUp.configure(width=19)
        self.powerUp.configure(command = lambda event = "button", direction = "up":self.setPower(event = event,direction = direction))

        self.powerDown = tk.Button(top)
        self.powerDown.place(relx=0.726, rely=0.432, height=24, width=16)
        self.powerDown.configure(activebackground="#ececec")
        self.powerDown.configure(activeforeground="#000000")
        self.powerDown.configure(background="#d9d9d9")
        self.powerDown.configure(disabledforeground="#a3a3a3")
        self.powerDown.configure(foreground="#000000")
        self.powerDown.configure(highlightbackground="#d9d9d9")
        self.powerDown.configure(highlightcolor="black")
        self.powerDown.configure(pady="0")
        self.powerDown.configure(text=u"\u2193")
        self.powerDown.configure(width=16)
        self.powerDown.configure(command = lambda event = "button",direction = "down": self.setPower(event = event, direction = direction))

        self.powerVar = tk.IntVar()
        self.powerSlider = tk.Scale(top, from_=0.0, to=100.0)
        self.powerSlider.place(relx=0.043, rely=0.617, relwidth=0.889
                , relheight=0.0, height=61, bordermode='ignore')
        self.powerSlider.configure(activebackground="#ececec")
        self.powerSlider.configure(background="#d9d9d9")
        self.powerSlider.configure(font="TkTextFont")
        self.powerSlider.configure(foreground="#000000")
        self.powerSlider.configure(highlightbackground="#d9d9d9")
        self.powerSlider.configure(highlightcolor="black")
        self.powerSlider.configure(length="202")
        self.powerSlider.configure(orient="horizontal")
        self.powerSlider.configure(tickinterval="20.0")
        self.powerSlider.configure(troughcolor="#d9d9d9")
        self.powerSlider.configure(variable=self.powerVar)
        self.powerSlider.configure(command = lambda event = 'slider',direction = None:self.setPower(event = event, direction = direction))

    def setPower(self,event=None,direction = None):
        change = False #boolean for if power needs to be updated
        if (event =="button") & (direction == "down"):
            if self.powerVar.get()>1:
                self.powerVar.set(self.powerVar.get()-1)
                self.powerEntryVar.set(str(self.powerVar.get())+ " %")
                change = True
        elif (event =="button") & (direction == "up"):
            if self.powerVar.get()<100:
                self.powerVar.set(self.powerVar.get()+1)
                self.powerEntryVar.set(str(self.powerVar.get())+" %")
                change = True
        else:
            self.powerEntryVar.set(str(self.powerVar.get())+" %")
            change = True
        if change & (self.ser.in_waiting==0) & (self.ser.out_waiting==0):
            success = self.updateFeatherM4()
            if success == False:
                print("Error updating power")

                

    def updateFeatherM4(self):
        success = False
        outString = str(self.powerVar.get())+'\n'
        self.ser.write(outString.encode()) #write as byte array
        sleep(0.05)
        echo = ((self.ser.read(self.ser.in_waiting)).decode()).strip()
        try:
            success = float(echo)==float(outString)
        except:
            print(echo)
        
        return(success)


if __name__ == '__main__':
    vp_start_gui()





